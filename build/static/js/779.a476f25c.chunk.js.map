{"version":3,"file":"static/js/779.a476f25c.chunk.js","mappings":"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","sources":["components/Avatar.js","components/ProfileEditAvatar.js","components/Thumb.js"],"sourcesContent":["import React from \"react\"\nimport { useContext } from \"react\"\nimport StateContext from \"../context/StateContext\"\n\n/* User Avatar */\nfunction Avatar(props) {\n  const appState = useContext(StateContext)\n\n  return <img src={`${appState.user.avatar}`} alt=\"avatar\" className=\"img-thumbnail mt-2\" style={{ height: `${props.height}`, width: `${props.width}` }} />\n}\n\nexport default Avatar\n","import React, { useState } from \"react\"\nimport Navbar from \"./Navbar\"\nimport { Alert, Button, Card, Col, Container, Fade, FloatingLabel, Form, Row } from \"react-bootstrap\"\nimport Page from \"./Page\"\nimport Thumb from \"./Thumb\"\nimport StateContext from \"../context/StateContext\"\nimport DispatchContext from \"../context/DispatchContext\"\n\nimport { useContext } from \"react\"\nimport { useEffect } from \"react\"\nimport Avatar from \"./Avatar\"\n\nfunction ProfileEditAvatar() {\n  const appState = useContext(StateContext)\n  const appDispatch = useContext(DispatchContext)\n\n  const [profile, setProfile] = useState({ avatar: false, gravatar: true })\n  const [file, setFile] = useState()\n  const [image, setImage] = useState(\"/upload.png\")\n  const [base64, setBase64] = useState()\n\n  const token = appState.user.token\n\n  useEffect(() => {\n    handlePersistance()\n  }, [])\n\n  // peristance\n  const handlePersistance = async () => {\n    try {\n      const res = await fetch(\"/user\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        }\n      })\n\n      const user = await res.json()\n      console.log(user)\n      // setUserState({ title: user.title, bio: user.bio })\n      setProfile({ avatar: user.upload, gravatar: !user.upload })\n      setImage(user.image)\n      console.log(user.image)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Ui\n  const handleChange = selection => {\n    setProfile({ avatar: !profile.avatar, gravatar: !profile.gravatar })\n  }\n\n  // submit form\n  const handleSubmit = async e => {\n    console.log(\"handleSubmit\")\n\n    e.preventDefault()\n\n    const checked = e.target[0].checked\n\n    const body = { upload: checked, image: base64 }\n\n    /* upload to DB */\n    try {\n      const res = await fetch(\"/profile/edit\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(body)\n      })\n\n      /* set global state of user avatar */\n      if (checked) {\n        if (base64) {\n          localStorage.setItem(\"avatar\", base64)\n          appDispatch({ type: \"setAvatar\", value: base64 })\n        } else {\n          localStorage.setItem(\"avatar\", image)\n          appDispatch({ type: \"setAvatar\", value: image })\n        }\n      } else {\n        localStorage.setItem(\"avatar\", \"/default-profile.jpg\")\n        appDispatch({ type: \"setAvatar\", value: \"/default-profile.jpg\" })\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <>\n      <Navbar />\n      <Page>\n        <Container>\n          {/* ROW */}\n          {/* Two Images */}\n          <Row>\n            <p>Choose an existing avatar, or drag and drop a photo from your computer.</p>\n          </Row>\n          <Avatar width={\"250px\"} height={\"200px\"} />\n          <Row>\n            <Col>{file ? <Thumb file={file} /> : <img src={`${image}`} className=\"img-thumbnail mt-2\" style={{ height: \"152px\", width: \"200px\", background: \"white\" }} />}</Col>\n            <Col>\n              <img src=\"/default-profile.jpg\" className=\"img-thumbnail mt-2\" style={{ height: \"152px\", width: \"200px\" }} />\n            </Col>\n          </Row>\n          {/* ROW */}\n          <Row>\n            {/* Form */}\n\n            <Form onSubmit={e => handleSubmit(e)}>\n              <Form.Check type=\"switch\" label=\"Avatar\" checked={profile.avatar} onChange={() => handleChange(\"avatar\")} />\n              <Form.Check type=\"switch\" label=\"Defaul Profile\" checked={profile.gravatar} onChange={() => handleChange(\"gravatar\")} />\n              {/* Switch to select Image type */}\n              {/* Image upload */}\n              <input\n                id=\"file\"\n                name=\"file\"\n                type=\"file\"\n                onChange={event => {\n                  const fileReader = new FileReader()\n                  fileReader.onload = () => {\n                    if (fileReader.readyState === 2) {\n                      // Base64 conversion\n                      setBase64(fileReader.result)\n                    }\n                  }\n                  // File from computer\n                  fileReader.readAsDataURL(event.target.files[0])\n                  setFile(event.target.files[0])\n                }}\n                className=\"form-control\"\n              />\n\n              <Button type=\"submit\">Submit</Button>\n            </Form>\n            {/* Submit Button */}\n          </Row>\n        </Container>\n      </Page>\n    </>\n  )\n}\n\nexport default ProfileEditAvatar\n\n/* \n  \ndefault image type is gravatar\n\nuser can not submit to backend without a image uploaded.\n\n\nselect image type will change image user will use in posts comments\n\n*/\n","import React, { useState } from \"react\"\n\n/* display a thumb picture of uploaded pic */\nfunction Thumb(props) {\n  const [loading, setLoading] = useState(true)\n  const [thumb, setThumb] = useState(\"\")\n\n  const fileSetup = () => {\n    if (!props.file) {\n      return\n    }\n    console.log(\"fileSetup:\" + props.file)\n    //! setLoading(true) - ERROR too many react re renders\n    let reader = new FileReader()\n\n    reader.onloadend = () => {\n      setLoading(false)\n      setThumb(reader.result)\n    }\n    reader.readAsDataURL(props.file)\n  }\n\n  fileSetup()\n\n  /* views */\n  while (!props.file) {\n    return null\n  }\n\n  if (loading) {\n    return <p>loading...</p>\n  }\n\n  return <img src={thumb} className=\"img-thumbnail mt-2\" height={200} width={200} />\n}\n\nexport default Thumb\n\n// class Thumb extends React.Component {\n//   state = {\n//     loading: false,\n//     thumb: undefined,\n//   };\n\n//   componentWillReceiveProps(nextProps) {\n//     if (!nextProps.file) { return; }\n\n//     this.setState({ loading: true }, () => {\n//       let reader = new FileReader();\n\n//       reader.onloadend = () => {\n//         this.setState({ loading: false, thumb: reader.result });\n//       };\n\n//       reader.readAsDataURL(nextProps.file);\n//     });\n//   }\n\n//   render() {\n//     const { file } = this.props;\n//     const { loading, thumb } = this.state;\n\n//     if (!file) { return null; }\n\n//     if (loading) { return <p>loading...</p>; }\n\n//     return (<img src={thumb}\n//       alt={file.name}\n//       className=\"img-thumbnail mt-2\"\n//       height={200}\n//       width={200} />);\n//   }\n// }\n"],"names":["props","appState","useContext","StateContext","src","user","avatar","alt","className","style","height","width","appDispatch","DispatchContext","useState","gravatar","profile","setProfile","file","setFile","image","setImage","base64","setBase64","token","useEffect","handlePersistance","fetch","method","headers","res","json","console","log","upload","handleChange","selection","handleSubmit","e","preventDefault","checked","target","body","JSON","stringify","localStorage","setItem","type","value","background","onSubmit","label","onChange","id","name","event","fileReader","FileReader","onload","readyState","result","readAsDataURL","files","loading","setLoading","thumb","setThumb","reader","onloadend","fileSetup"],"sourceRoot":""}