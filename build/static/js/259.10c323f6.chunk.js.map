{"version":3,"file":"static/js/259.10c323f6.chunk.js","mappings":"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","sources":["components/Avatar.js","components/UserFeed.js","components/Profile.js"],"sourcesContent":["import React from \"react\"\nimport { useContext } from \"react\"\nimport StateContext from \"../context/StateContext\"\n\n/* User Avatar */\nfunction Avatar(props) {\n  const appState = useContext(StateContext)\n\n  return <img src={`${appState.user.avatar}`} alt=\"avatar\" className=\"img-thumbnail mt-2\" style={{ height: `${props.height}`, width: `${props.width}` }} />\n}\n\nexport default Avatar\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { Row } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\nimport StateContext from \"../context/StateContext\"\nimport { handleDate } from \"../helper/helper\"\n\nfunction UserFeed() {\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n\n  const [userFeed, setUserFeed] = useState([])\n  const [feed, setFeed] = useState([])\n\n  useEffect(() => {\n    setFeeder()\n  }, [])\n\n  const setFeeder = async () => {\n    const res = await fetch(\"/userfeed\", {\n      method: \"GET\",\n      headers: {\n        \"x-access-token\": token,\n        \"Content-type\": \"application/json\"\n      }\n    })\n\n    const feed = await res.json()\n    console.log(feed)\n    setUserFeed(feed)\n  }\n\n  //Implement time\n\n  // organize into array of objects.. this organized into seperate arrays.\n  // const feeder = () => {\n  //   const groups = userFeed.reduce(\n  //     (groups, item) => ({\n  //       ...groups,\n  //       [item.createdAt]: [...(groups[item.createdAt] || []), item]\n  //     }),\n  //     {}\n  //   )\n  //   console.log(groups)\n  //   // setFeed(groups)\n  // }\n  // feeder()\n  return (\n    <>\n      <Row>\n        <h1>Recent Activity</h1>\n        <pre>{JSON.stringify(userFeed)}</pre>\n        {console.log(userFeed)}\n        {userFeed.map(feed =>\n          feed.typeOf == \"Post\" ? (\n            <p>\n              <i class=\"fa-solid fa-comment\"></i>\n              <a href=\"\">{feed.name}</a> Asked <Link to={`/posts/${feed._id}`}>{feed.title}</Link> @{handleDate(feed.createdAt)}\n            </p>\n          ) : feed.typeOf == \"Answer\" ? (\n            <p>\n              <i class=\"fa-solid fa-comment-medical\"></i> Answered<Link to={`/posts/${feed.post}`}>{feed.text}</Link>@{handleDate(feed.createdAt)}\n            </p>\n          ) : (\n            <p>\n              <i class=\"fa-brands fa-rocketchat\"></i>\n              <a href=\"\">{feed.name}</a> Commented <Link to={`/posts/${feed.post}`}>{feed.postName}</Link>@{handleDate(feed.createdAt)}\n            </p>\n          )\n        )}\n      </Row>\n    </>\n  )\n}\n\nexport default UserFeed\n","import { Link, useNavigate } from \"react-router-dom\"\nimport { useContext, useEffect } from \"react\"\nimport { useState } from \"react\"\nimport Navbar from \"./Navbar\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./css/Profile.css\"\nimport Page from \"./Page\"\nimport { Button, Card, Container, Form, Row, Toast } from \"react-bootstrap\"\n// import FlashMessage from \"./react-flash-message\"\n/* context */\nimport StateContext from \"../context/StateContext\"\nimport UserFeed from \"./UserFeed\"\nimport Avatar from \"./Avatar\"\nfunction Profile() {\n  const navigate = useNavigate()\n  const appState = useContext(StateContext)\n\n  const [user, setUser] = useState([])\n\n  const token = appState.user.token\n\n  useEffect(() => {\n    getUser()\n  }, [])\n\n  const getUser = async () => {\n    const response = await fetch(\"/profile\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      }\n    })\n\n    const user = await response.json()\n\n    setUser(user)\n  }\n\n  return (\n    <>\n      <Navbar />\n\n      <Page title=\"Profile\">\n        <h1>Profile</h1>\n        <Container>\n          <Row>\n            {/* Profile Card */}\n            <Card>\n              <Row>{localStorage.getItem(\"avatar\") != \"null\" ? <Avatar width={\"250px\"} height={\"200px\"} /> : <img src={\"/default-profile.jpg\"} alt=\"profile-image\" className=\"thumbnail\" style={{ paddingTop: \"10px\" }} />}</Row>\n\n              <Card.Body>\n                <Card.Title>Username: {appState.user.username}</Card.Title>\n                <Card.Text>Email: {appState.user.email}</Card.Text>\n                <Card.Text>Joined on {appState.user.createdAt}</Card.Text>\n\n                <Card.Text>Job Title: {user.title}</Card.Text>\n                <Card.Text>Bio: {user.bio}</Card.Text>\n\n                {console.log(user.title)}\n                {console.log(user.bio)}\n\n                <Link to=\"/profile/edit\">Edit Profile</Link>\n              </Card.Body>\n            </Card>\n          </Row>\n\n          <Row>\n            <UserFeed />\n          </Row>\n        </Container>\n      </Page>\n      {/* initial state show nothing */}\n    </>\n  )\n}\n\nexport default Profile\n"],"names":["props","appState","useContext","StateContext","src","user","avatar","alt","className","style","height","width","token","useState","userFeed","setUserFeed","useEffect","setFeeder","fetch","method","headers","res","json","feed","console","log","Row","JSON","stringify","map","typeOf","class","href","name","to","_id","title","handleDate","createdAt","post","text","postName","useNavigate","setUser","getUser","response","Navbar","Page","Container","Card","localStorage","getItem","Avatar","paddingTop","username","email","bio"],"sourceRoot":""}