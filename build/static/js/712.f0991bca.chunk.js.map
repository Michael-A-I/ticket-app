{"version":3,"file":"static/js/712.f0991bca.chunk.js","mappings":"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","sources":["components/CreatePost.js","components/Thumb.js"],"sourcesContent":["import { useNavigate, Navigate, useLocation } from \"react-router-dom\"\nimport { useEffect, useState, useContext } from \"react\"\n// import { useLocation } from \"react-router\"\n/* Components */\nimport Navbar from \"./Navbar\"\nimport Page from \"./Page\"\n/* Packages */\nimport swal from \"sweetalert\"\nimport { Formik } from \"formik\"\nimport * as yup from \"yup\"\nimport { Button, Dropdown, Form } from \"react-bootstrap\"\nimport \"./css/CreatePost.css\"\n\n/* Context */\nimport StateContext from \"../context/StateContext\"\nimport Thumb from \"./Thumb\"\n\nfunction CreatePost(props) {\n  const history = useNavigate()\n  const location = useLocation()\n\n  const [file, setFile] = useState()\n\n  console.log(props)\n  /* global state */\n  const appState = useContext(StateContext)\n\n  function swalLoad() {\n    swal({ text: \"New Post\", icon: \"success\", buttons: false, timer: 1500 })\n  }\n\n  async function handleCreatePost(values) {\n    const createPost = values\n    console.log(JSON.stringify(values))\n    /* file uploads with data from front end. */\n    // console.log(values.file.name)\n\n    try {\n      const res = await fetch(\"/posts/new\", {\n        method: \"POST\",\n        headers: {\n          \"x-access-token\": appState.user.token,\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(createPost)\n      })\n\n      const postResponse = await res.json()\n\n      console.log(postResponse)\n\n      return swalLoad()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  //  Validation\n\n  const schema = yup.object().shape({\n    category: yup.string(),\n    title: yup.string().required(\"Please set a title!\"),\n    description: yup.string().required(\"Please set a description!\"),\n    file: yup.mixed()\n  })\n\n  const dropDownArray = [\"General\", \"Engineer\", \"Product\", \"Support\"]\n\n  console.log(location)\n\n  let createPostOption = localStorage.getItem(\"handleOptions\")\n\n  if (createPostOption == \"Dashboard\") {\n    createPostOption = \"General\"\n  }\n\n  const dropDown = dropDownArray.filter(item => item != createPostOption)\n\n  console.log(dropDown)\n  return (\n    <>\n      <Navbar />\n      <Page title=\"create post\">\n        <div id=\"bootstrap-overrides\">\n          <div className=\"create-post--center\">\n            <Formik\n              validationSchema={schema}\n              onSubmit={handleCreatePost}\n              validateOnBlur={false}\n              validateOnChange={false}\n              initialValues={{\n                category: createPostOption,\n                title: \"\",\n                description: \"\",\n                file: null\n              }}\n            >\n              {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\n                <Form onSubmit={handleSubmit} encType=\"multipart/form-data\">\n                  {console.log(values)}\n                  <div className=\"dropdown-formgroup\">\n                    <h1>Ask question in </h1>\n                    {/* Drop down select */}\n                    <Form.Group>\n                      <Form.Select className=\"select-form\" aria-label=\"Default select example\" value={values.category} onChange={handleChange} name=\"category\">\n                        <option> {createPostOption}</option>\n                        {dropDown.map(item => (\n                          <option key={item} label={`${item}`} value={`${item}`} onChange={handleChange}>\n                            {item}\n                          </option>\n                        ))}\n                      </Form.Select>\n                    </Form.Group>\n                  </div>\n\n                  <Form.Group className=\"mb-3 \">\n                    {console.log(dropDownArray)}\n                    <Form.Label>Title</Form.Label>\n                    {/* Title */}\n                    <Form.Control control=\"input\" size=\"lg\" type=\"text\" name=\"title\" placeholder=\"Post Title\" value={values.title} onChange={handleChange} isValid={touched.lastName && !errors.lastName} isInvalid={!!errors.title} />\n\n                    <Form.Control.Feedback type=\"invalid\">{errors.title}</Form.Control.Feedback>\n                  </Form.Group>\n                  {/* Description */}\n                  <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control as=\"textarea\" name=\"description\" rows={6} placeholder=\"description\" value={values.description} onChange={handleChange} isValid={touched.lastName && !errors.lastName} isInvalid={!!errors.description} />\n                    <Form.Control.Feedback type=\"invalid\">{errors.description}</Form.Control.Feedback>\n                  </Form.Group>\n\n                  {/* File upload */}\n                  <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Label>File Upload</Form.Label>\n                    <input\n                      id=\"file\"\n                      name=\"file\"\n                      type=\"file\"\n                      onChange={event => {\n                        const fileReader = new FileReader()\n                        fileReader.onload = () => {\n                          if (fileReader.readyState === 2) {\n                            setFieldValue(\"file\", fileReader.result)\n                          }\n                        }\n                        fileReader.readAsDataURL(event.target.files[0])\n                        setFile(event.target.files[0])\n                      }}\n                      className=\"form-control\"\n                    />\n\n                    {/* Thumbnail for files */}\n                    <Thumb file={file} />\n                  </Form.Group>\n\n                  <Button type=\"submit\">Sumbit</Button>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </div>\n      </Page>\n    </>\n  )\n}\n\nexport default CreatePost\n","import React, { useState } from \"react\"\n\n/* display a thumb picture of uploaded pic */\nfunction Thumb(props) {\n  const [loading, setLoading] = useState(true)\n  const [thumb, setThumb] = useState(\"\")\n\n  const fileSetup = () => {\n    if (!props.file) {\n      return\n    }\n    console.log(\"fileSetup:\" + props.file)\n    //! setLoading(true) - ERROR too many react re renders\n    let reader = new FileReader()\n\n    reader.onloadend = () => {\n      setLoading(false)\n      setThumb(reader.result)\n    }\n    reader.readAsDataURL(props.file)\n  }\n\n  fileSetup()\n\n  /* views */\n  while (!props.file) {\n    return null\n  }\n\n  if (loading) {\n    return <p>loading...</p>\n  }\n\n  return <img src={thumb} className=\"img-thumbnail mt-2\" height={200} width={200} />\n}\n\nexport default Thumb\n\n// class Thumb extends React.Component {\n//   state = {\n//     loading: false,\n//     thumb: undefined,\n//   };\n\n//   componentWillReceiveProps(nextProps) {\n//     if (!nextProps.file) { return; }\n\n//     this.setState({ loading: true }, () => {\n//       let reader = new FileReader();\n\n//       reader.onloadend = () => {\n//         this.setState({ loading: false, thumb: reader.result });\n//       };\n\n//       reader.readAsDataURL(nextProps.file);\n//     });\n//   }\n\n//   render() {\n//     const { file } = this.props;\n//     const { loading, thumb } = this.state;\n\n//     if (!file) { return null; }\n\n//     if (loading) { return <p>loading...</p>; }\n\n//     return (<img src={thumb}\n//       alt={file.name}\n//       className=\"img-thumbnail mt-2\"\n//       height={200}\n//       width={200} />);\n//   }\n// }\n"],"names":["props","useNavigate","location","useLocation","useState","file","setFile","console","log","appState","useContext","StateContext","swalLoad","swal","text","icon","buttons","timer","values","createPost","JSON","stringify","fetch","method","headers","user","token","body","res","json","postResponse","schema","yup","shape","category","title","required","description","dropDownArray","createPostOption","localStorage","getItem","dropDown","filter","item","Navbar","Page","id","className","validationSchema","onSubmit","validateOnBlur","validateOnChange","initialValues","handleSubmit","handleChange","touched","errors","setFieldValue","Form","encType","value","onChange","name","map","label","control","size","type","placeholder","isValid","lastName","isInvalid","controlId","as","rows","event","fileReader","FileReader","onload","readyState","result","readAsDataURL","target","files","Thumb","Button","loading","setLoading","thumb","setThumb","reader","onloadend","fileSetup","src","height","width"],"sourceRoot":""}