{"version":3,"file":"static/js/60.37e03764.chunk.js","mappings":"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","sources":["components/ui/Answers/CreateAnswer.js","../node_modules/react-bootstrap/esm/InputGroup.js","components/ui/PostView/CreatePostComments.js","components/ui/PostView/PostComments.js","components/ui/PostView.js","components/ui/Answers/AnswerComments.js","components/ui/Answers/AnswerCommentsView.js","components/ui/Answers/Answer.js","components/Post.js"],"sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { Button, Col, FloatingLabel, Form, Row } from \"react-bootstrap\"\nimport { useParams } from \"react-router\"\nimport StateContext from \"../../../context/StateContext\"\n\nfunction CreateAnswer(props) {\n  let { id } = useParams()\n  const appState = useContext(StateContext)\n\n  const token = appState.user.token\n\n  /* Post Answer to Database */\n\n  const handleAnswersSubmit = async event => {\n    event.preventDefault()\n    console.log(\"handle submit\")\n\n    const comment = event.target\n    const createComment = { text: comment[0].value, post: id }\n    console.log(createComment)\n\n    try {\n      await fetch(`/posts/${id}/answers`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(createComment)\n      })\n\n      /* refresh answers view */\n      props.getAnswerComments()\n    } catch (error) {\n      return error\n    }\n  }\n\n  return (\n    <Row ref={props.myRef}>\n      <Col xs={{ span: 10, offset: 1 }}>\n        {\" \"}\n        <Form onSubmit={handleAnswersSubmit}>\n          <FloatingLabel controlId=\"floatingInput\" label=\"Answer\" className=\"mb-3\">\n            <Form.Control required as=\"textarea\" placeholder=\"Leave a answer here\" style={{ height: \"100px\" }} />\n          </FloatingLabel>\n\n          <div class=\"text-right\">\n            <Button type=\"submit\" class=\"btn btn-primary\">\n              Post Answer\n            </Button>\n          </div>\n        </Form>\n      </Col>\n      <div class=\"row\">\n        <div class=\"col-sm-4 col-sm-offset-4\"></div>\n      </div>\n    </Row>\n    /* Answers View\n      Answers Comments\n      Answerts input\n    */\n  )\n}\n\nexport default CreateAnswer\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import React, { useContext, useState } from \"react\"\nimport { Button, Col, FloatingLabel, Form, FormControl, InputGroup, Row } from \"react-bootstrap\"\nimport { useParams } from \"react-router\"\nimport StateContext from \"../../../context/StateContext\"\nfunction CreatePostCommnet(props) {\n  const [postCommentClick, setPostCommentClick] = useState(false)\n  let { id } = useParams()\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n\n  const handlePostComment = () => {\n    setPostCommentClick(!postCommentClick)\n  }\n\n  const handleCommentSubmit = async event => {\n    event.preventDefault()\n    console.log(\"handle submit\")\n    handlePostComment()\n    const user = localStorage.getItem(\"id\")\n    const username = localStorage.getItem(\"username\")\n\n    const comment = event.target\n\n    const createComment = { text: comment[0].value, post: id }\n\n    console.log(createComment)\n\n    try {\n      const res = await fetch(`/posts/${id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(createComment)\n      })\n      console.log(props.comments)\n      // props.setComments(prev => [...prev, createComment])\n      props.getComments()\n    } catch (error) {\n      return error\n    }\n  }\n\n  /* CRUD post comments */\n  return (\n    <Row>\n      {postCommentClick ? (\n        <Col xs={{ span: 10, offset: 1 }}>\n          {\" \"}\n          <Form onSubmit={handleCommentSubmit}>\n            <Form.Group>\n              <InputGroup className=\"\">\n                <FloatingLabel controlId=\"floatingInput\" label=\"Post Comment\" className=\"mb-3\">\n                  <FormControl placeholder=\"comment\" aria-label=\"comment\" aria-describedby=\"basic-addon1\" required />\n                </FloatingLabel>\n              </InputGroup>\n            </Form.Group>\n            <Button type=\"btn\" class=\"btn btn-primary\" onClick={handlePostComment}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" class=\"btn btn-primary\">\n              Save\n            </Button>\n          </Form>\n        </Col>\n      ) : (\n        <Button onClick={handlePostComment}>Add Comment</Button>\n      )}\n    </Row>\n  )\n}\n\nexport default CreatePostCommnet\n","import React, { useEffect, useState, useRef, useContext } from \"react\"\nimport { Button, Form, Row } from \"react-bootstrap\"\nimport { useNavigate, useParams } from \"react-router\"\nimport \"./css/PostComments.css\"\n\n/* Context */\nimport StateContext from \"../../../context/StateContext\"\nimport { handleDate } from \"../../../helper/helper\"\n\nfunction PostComments(props) {\n  let { id } = useParams()\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n  const history = useNavigate()\n  const [commentId, setCommentID] = useState(null)\n  const [edit, setEdit] = useState([])\n\n  useEffect(() => props.getComments(), [history])\n\n  /* Logic for comments  */\n\n  /* Logic for comments UI */\n\n  const editMouseOver = (event, key, user) => {\n    console.log(\"mouse over\")\n\n    /* only allow user the created comment to edit */\n    if (user != appState.user.id) {\n      return\n    }\n\n    const selectedIndex = event.target.getAttribute(\"keyvalue\")\n\n    if (key == selectedIndex) {\n      setCommentID(key)\n    }\n  }\n\n  const editMouseLeave = event => {\n    console.log(\"mouse leave\")\n    console.log(event)\n\n    const selectedIndex = event.target.getAttribute(\"keyvalue\")\n    // setCommentID(null)\n    console.log(commentId)\n    setCommentID(null)\n\n    // setEdit(false)\n  }\n  console.log(commentId)\n\n  const editOnClick = id => {\n    console.log(\" edit on click\")\n    console.log(id)\n    setEdit(prev => [...prev, id])\n    console.log(\"edit\" + edit)\n  }\n\n  const cancelEdit = id => {\n    console.log(id)\n    /* return array without comment._id  set comment out of edit mode*/\n    setEdit(prev => prev.filter(pre => pre !== id))\n  }\n\n  const deleteComment = async id => {\n    console.log(\"delete comment: \" + id)\n    try {\n      const res = await fetch(`/posts/${id}/comments`, {\n        method: \"Delete\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        }\n      })\n\n      props.getComments()\n    } catch (error) {\n      return error\n    }\n  }\n\n  const updateComment = async (event, id) => {\n    event.preventDefault()\n    const comment = event.target\n    const createComment = { text: comment[0].value }\n    console.log(createComment)\n\n    /* return array without comment._id  set comment out of edit mode*/\n\n    // await fetchUpdateComment(createComment)\n    await fetch(`/posts/${id}/comments`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      },\n      body: JSON.stringify(createComment)\n    })\n\n    console.log(\"after fetch\")\n  }\n\n  const afterUpdate = id => {\n    console.log(\"after update id: \")\n    console.log(id)\n    setEdit(\n      prev =>\n        prev.filter(function (pre) {\n          return pre != id\n        })\n      // console.log(\"edit after update \" + edit)\n    )\n    // setEdit([])\n    props.getComments()\n    console.log(\"edit after update \" + edit)\n  }\n\n  return (\n    <>\n      {/* <pre>{JSON.stringify(props.comments[0].user.image)}</pre> */}\n      {props.comments.map((comment, index) => (\n        <Row>\n          {console.log(\"edit after click JSX \" + edit)}\n          {commentId == comment._id || edit.includes(comment._id) ? (\n            edit.includes(comment._id) ? (\n              <>\n                <p> {comment.name}</p>\n                {comment.user.image == undefined ? <img src=\"/default-profile.jpg\" alt=\"profile-image\" className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} /> : <img src={`${comment.user.image}`} alt=\"profile-image\" className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} />}\n\n                {/*! run function after fetch */}\n                <Form onSubmit={e => updateComment(e, comment._id) & afterUpdate(comment._id)}>\n                  <Form.Control required type=\"text\" placeholder={`${comment.text}`} />\n\n                  <Button variant=\"primary\" type=\"submit\">\n                    Save\n                  </Button>\n\n                  <Button variant=\"warning\" onClick={() => cancelEdit(comment._id)}>\n                    Cancel\n                  </Button>\n                  <Button variant=\"danger\" onClick={() => deleteComment(comment._id)}>\n                    Delete\n                  </Button>\n                </Form>\n                <p> {handleDate(comment.updatedAt)}</p>\n              </>\n            ) : (\n              <>\n                <p> {comment.name}</p>\n\n                {comment.user.image == undefined ? <img src=\"/default-profile.jpg\" alt=\"profile-image\" className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} /> : <img src={`${comment.user.image}`} alt=\"profile-image\" className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} />}\n\n                <p className=\"comments-style\" key={comment._id} keyvalue={comment._id} onMouseLeave={editMouseLeave} onClick={() => editOnClick(comment._id)}>\n                  {comment.text}\n                </p>\n                <i class=\"fa-solid fa-pen\"></i>\n\n                <p> {handleDate(comment.updatedAt)}</p>\n              </>\n            )\n          ) : (\n            <>\n              <p> {comment.name}</p>\n              {/* image */}\n              {comment.user.image == undefined ? <img src=\"/default-profile.jpg\" alt=\"profile-image\" className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} /> : <img src={`${comment.user.image}`} alt=\"profile-image\" className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} />}\n              <p key={comment._id} keyvalue={comment._id} onMouseOver={e => editMouseOver(e, comment._id, comment.user._id)}>\n                {comment.text}\n              </p>\n\n              <p> {handleDate(comment.updatedAt)}</p>\n            </>\n          )}\n        </Row>\n      ))}\n    </>\n  )\n}\n\nexport default PostComments\n\n/* \n? when should you use arror function in jsx \n! seems like whenever I need to ender properties into the function arrow function is needed. \n\n?arrow functions VS regular functions - what is the difference?\n\n*/\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { Button, Card, Col, FloatingLabel, Form, Row } from \"react-bootstrap\"\nimport { handleDate } from \"../../helper/helper\"\nimport CreateAnswer from \"./Answers/CreateAnswer\"\nimport CreatePostCommnets from \"./PostView/CreatePostComments\"\nimport PostComments from \"./PostView/PostComments\"\n\n/* Context */\nimport StateContext from \"../../context/StateContext\"\nimport { useParams } from \"react-router\"\nfunction PostView(props) {\n  /* state context */\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n\n  const [edit, setEdit] = useState(true)\n\n  const [liked, setLiked] = useState()\n  const [following, setFollowing] = useState()\n\n  const { id } = useParams()\n\n  useEffect(() => {\n    console.log(\"postview useEffect\")\n    // hasUserLiked()\n    // checkFollow()\n  }, [])\n\n  const editPost = () => {\n    console.log(\"editPost\")\n\n    setEdit(!edit)\n  }\n  const deletePost = async id => {\n    console.log(\"deletePost\")\n\n    try {\n      console.log(\"PostsIndex.js token: \" + token)\n      await fetch(`/posts/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        }\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleSubmit = async (event, id) => {\n    console.log(\"postView.js handleSubmit\")\n\n    event.preventDefault()\n    const comment = event.target\n    const updatePost = { title: comment[0].value, description: comment[1].value }\n\n    try {\n      console.log(\"PostsIndex.js token: \" + token)\n      await fetch(`/posts/${id}/edit`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(updatePost)\n      })\n      setEdit(!edit)\n      /* refresh view */\n      props.getPost()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  // check to see if user id is in db\n  const checkFollow = async () => {\n    const res = await fetch(`/posts/${id}/followcheck`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      }\n    })\n    const follow = await res.json()\n    // console.log(\"Check Follow\")\n    setFollowing(follow)\n\n    console.log(\"Check Follow\" + follow)\n  }\n  // add user id to db\n\n  const handleFollow = async () => {\n    console.log(\"follow\")\n    setFollowing(true)\n    const res = await fetch(`/posts/${id}/follow`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      },\n      body: JSON.stringify({ hasUserFollowed: appState.user.id })\n    })\n\n    const state = await res.json()\n  }\n\n  // remove user id from db\n  const handleUnFollow = async () => {\n    console.log(\"unfollow\")\n    setFollowing(false)\n    const res = await fetch(`/posts/${id}/unfollow`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      },\n      body: JSON.stringify({ hasUserFollowed: appState.user.id })\n    })\n\n    const state = await res.json()\n  }\n\n  const handleLike = async () => {\n    setLiked(!liked)\n\n    console.log(\"like\")\n    const res = await fetch(`/posts/${id}/like`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      },\n      body: JSON.stringify({ hasUserFollowed: appState.user.id })\n    })\n\n    const state = await res.json()\n  }\n\n  const handleUnLike = async () => {\n    console.log(\"unlike\")\n    setLiked(!liked)\n\n    const res = await fetch(`/posts/${id}/unlike`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      },\n      body: JSON.stringify({ hasUserFollowed: appState.user.id })\n    })\n\n    const state = await res.json()\n  }\n\n  const hasUserLiked = async () => {\n    /* Persistance */\n    console.log(\"hasUserLiked\")\n\n    const res = await fetch(`/posts/${id}/hasUserLiked`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token\n      }\n    })\n\n    const state = await res.json()\n\n    setLiked(state.hasLiked)\n  }\n\n  return (\n    <Row>\n      {edit ? (\n        <Card>\n          <Card.Body>\n            {following ? <Button onClick={handleUnFollow}>Followed</Button> : <Button onClick={handleFollow}>Follow</Button>}\n            <Card.Title>{props.post.title}</Card.Title>\n            <Card.Text>{props.post.description}</Card.Text>\n            {props.post.updatedAt != props.post.createdAt ? <Card.Text>updated at {handleDate(props.post.updatedAt)}</Card.Text> : <Card.Text>created at {handleDate(props.post.updatedAt)}</Card.Text>}\n            <Row>{props.post.file != undefined ? <img src={props.post.file} className=\"img-thumbnail mt-2\" style={{ height: \"100px\", width: \"150px\" }} /> : \"\"}</Row>\n\n            {/* User */}\n            <Row>\n              {props.post && props.post.user != undefined ? <p>{props.post.user.username}</p> : \"\"}\n\n              {props.post.user == undefined ? <img src=\"/default-profile.jpg\" className=\"img-thumbnail mt-2\" style={{ height: \"40px\", width: \"50px\" }} /> : <img src={props.post.user.image} className=\"img-thumbnail mt-2\" style={{ height: \"40px\", width: \"50px\" }} />}\n            </Row>\n            {/* Conditional to fix issue with props.post.user._id returning undefined */}\n            {props.post.user && props.post.user._id == appState.user.id ? (\n              <>\n                <Button variant=\"primary\" onClick={props.executeScroll}>\n                  Answer Post\n                </Button>\n                <Button variant=\"warning\" onClick={editPost}>\n                  Edit\n                </Button>\n                <Button variant=\"danger\" onClick={() => deletePost(props.post._id)}>\n                  Delete\n                </Button>\n              </>\n            ) : (\n              \"\"\n            )}\n\n            {liked ? <i class=\"fa-solid fa-heart\" onClick={handleUnLike} style={{ color: \"red\", background: \"grey\" }}></i> : <i class=\"fa-solid fa-heart\" onClick={handleLike} style={{ color: \"white\", background: \"grey\" }}></i>}\n          </Card.Body>\n        </Card>\n      ) : (\n        <Card>\n          <Card.Body>\n            <Form onSubmit={e => handleSubmit(e, props.post._id)}>\n              <Form.Label>Title</Form.Label>\n              {/* Title */}\n              <Form.Control control=\"input\" size=\"lg\" type=\"text\" placeholder={`${props.post.title}`} name=\"title\" />\n\n              <Form.Control type=\"text\" placeholder={`${props.post.description}`} />\n              {props.post && props.post.updatedAt != props.post.createdAt ? <Card.Text>updated at {handleDate(props.post.updatedAt)}</Card.Text> : <Card.Text>created at {handleDate(props.post.updatedAt)}</Card.Text>}\n              {/* {console.log(props.post.file)} */}\n              {props.post.file ? <img src={props.post.file} className=\"img-thumbnail mt-2\" height={200} width={200} /> : \"\"}\n\n              <Button type=\"submit\" variant=\"primary\">\n                Save\n              </Button>\n              <Button variant=\"warning\" onClick={() => setEdit(!edit)}>\n                Cancel\n              </Button>\n              <Button variant=\"danger\" onClick={() => deletePost(props.post._id)}>\n                Delete\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      )}\n    </Row>\n  )\n}\n\nexport default PostView\n\n/* \nget data from db\nset initial value of page upload to set following state\n\nonclick change value of state to change ui and update back end\n\non page refresh get data from db and set initial state. \n*/\n","import React, { useContext, useState } from \"react\"\nimport { Button, Col, FloatingLabel, Form, FormControl, InputGroup, Row } from \"react-bootstrap\"\nimport { useParams } from \"react-router\"\nimport StateContext from \"../../../context/StateContext\"\n\nfunction AnswerComments(props) {\n  const [postCommentClick, setPostCommentClick] = useState(false)\n  let { id } = useParams()\n  let commentId = props.answerId\n  const postId = props.postId\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n\n  const handlePostComment = () => {\n    setPostCommentClick(!postCommentClick)\n  }\n\n  const handleCommentSubmit = async event => {\n    // event.preventDefault()\n    console.log(\"handle submit\")\n    handlePostComment()\n    // const user = localStorage.getItem()\n    const comment = event.target\n    const createComment = { text: comment[0].value }\n    console.log(createComment)\n    console.log(props.answerID)\n    console.log(id)\n\n    try {\n      await fetch(`/posts/${id}/answer/${commentId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(createComment)\n      })\n\n      //! refresh answer comments view on save\n      props.getAnswerComments()\n      // !\n    } catch (error) {\n      return error\n    }\n  }\n\n  /* CRUD post comments */\n  return (\n    <Row>\n      {postCommentClick ? (\n        <Col xs={{ span: 10, offset: 1 }}>\n          {\" \"}\n          <Form onSubmit={handleCommentSubmit}>\n            <Form.Group>\n              <InputGroup className=\"\">\n                <FloatingLabel controlId=\"floatingInput\" label=\"Post Comment\" className=\"mb-3\">\n                  <FormControl placeholder=\"comment\" aria-label=\"comment\" aria-describedby=\"basic-addon1\" required />\n                </FloatingLabel>\n              </InputGroup>\n            </Form.Group>\n            <Button type=\"btn\" class=\"btn btn-primary\" onClick={handlePostComment}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" class=\"btn btn-primary\">\n              Save\n            </Button>\n          </Form>\n        </Col>\n      ) : (\n        <Button onClick={handlePostComment}>Add Comment</Button>\n      )}\n    </Row>\n  )\n}\n\nexport default AnswerComments\n","import React, { useEffect, useState, useRef, useContext } from \"react\"\nimport { Button, Form, Row } from \"react-bootstrap\"\nimport { useNavigate, useParams } from \"react-router\"\n// import \"./css/PostComments.css\"\n\n/* Context */\nimport StateContext from \"../../../context/StateContext\"\nimport { handleDate } from \"../../../helper/helper\"\n\nfunction AnswerCommentsView(props) {\n  let { id } = useParams()\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n\n  const [commentId, setCommentID] = useState(null)\n  const [edit, setEdit] = useState([])\n\n  const editMouseOver = (event, key, user) => {\n    console.log(\"editMouseOver\")\n    console.log(user)\n    console.log(appState.user.id)\n\n    /* only allow user the created comment to edit */\n    if (user != appState.user.id) {\n      return\n    }\n\n    console.log(\"mouse over\")\n\n    const selectedIndex = event.target.getAttribute(\"keyvalue\")\n\n    if (key == selectedIndex) {\n      setCommentID(key)\n    }\n  }\n\n  const editMouseLeave = event => {\n    console.log(\"mouse leave\")\n    console.log(event)\n\n    const selectedIndex = event.target.getAttribute(\"keyvalue\")\n    // setCommentID(null)\n    console.log(commentId)\n    setCommentID(null)\n\n    // setEdit(false)\n  }\n\n  const editOnClick = id => {\n    console.log(\" edit on click\")\n    console.log(id)\n    setEdit(prev => [...prev, id])\n    console.log(\"edit\" + edit)\n  }\n\n  const cancelEdit = id => {\n    console.log(id)\n    /* return array without comment._id  set comment out of edit mode*/\n    setEdit(prev => prev.filter(pre => pre !== id))\n  }\n\n  const deleteComment = async id => {\n    console.log(\"delete comment: \" + id)\n    try {\n      const res = await fetch(`/posts/${id}/comments`, {\n        method: \"Delete\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        }\n      })\n      console.log(\"refresh view\")\n      //! refresh answers after delete\n      props.getAnswerComments()\n    } catch (error) {\n      return error\n    }\n  }\n\n  const updateComment = async (event, id) => {\n    event.preventDefault()\n    const comment = event.target\n    const createComment = { text: comment[0].value }\n    console.log(createComment)\n    /* return array without comment._id  set comment out of edit mode*/\n    // await fetchUpdateComment(createComment)\n    try {\n      await fetch(`/posts/${id}/comments`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(createComment)\n      })\n      console.log(\"after fetch\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const afterUpdate = id => {\n    console.log(\"after update id: \")\n    console.log(id)\n    setEdit(\n      prev =>\n        prev.filter(function (pre) {\n          return pre != id\n        })\n      // console.log(\"edit after update \" + edit)\n    )\n    //! refresh answers after delete\n    props.getAnswerComments()\n    console.log(\"edit after update \" + edit)\n  }\n\n  return (\n    <>\n      {console.log(\"Post Answer from Answer Comoments View:\" + props.comments.text)}\n\n      {props.comments.map((comment, index) => (\n        <Row>\n          {console.log(comment.user)}\n          {commentId == comment._id || edit.includes(comment._id) ? (\n            edit.includes(comment._id) ? (\n              <>\n                <p> {comment.name}</p>\n                <Form onSubmit={e => updateComment(e, comment._id) & afterUpdate(comment._id)}>\n                  <Form.Control type=\"text\" placeholder={`${comment.text}`} />\n                  {comment.user && comment.user.image == undefined ? <img src=\"/default-profile.jpg\" alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} /> : <img src={`${comment.user.image}`} alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} />}\n\n                  <Button variant=\"primary\" type=\"submit\">\n                    Save\n                  </Button>\n\n                  <Button variant=\"warning\" onClick={() => cancelEdit(comment._id)}>\n                    Cancel\n                  </Button>\n                  <Button variant=\"danger\" onClick={() => deleteComment(comment._id)}>\n                    Delete\n                  </Button>\n                </Form>\n                <p> {handleDate(comment.updatedAt)}</p>\n              </>\n            ) : (\n              <>\n                <p> {comment.name}</p>\n                {comment.user && comment.user.image == undefined ? <img src=\"/default-profile.jpg\" alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} /> : <img src={`${comment.user.image}`} alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} />}\n\n                <p className=\"comments-style\" key={comment._id} keyvalue={comment._id} onMouseLeave={editMouseLeave} onClick={() => editOnClick(comment._id)}>\n                  {comment.text}\n                </p>\n\n                <p> {handleDate(comment.updatedAt)}</p>\n              </>\n            )\n          ) : (\n            <>\n              <p> {comment.name}</p>\n              {comment.user && comment.user.image == undefined ? <img src=\"/default-profile.jpg\" alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} /> : <img src={`${comment.user.image}`} alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"50px\" }} />}\n\n              <p key={comment._id} keyvalue={comment._id} onMouseOver={e => editMouseOver(e, comment._id, comment.user._id)}>\n                {comment.text}\n              </p>\n              <p> {handleDate(comment.updatedAt)}</p>\n            </>\n          )}\n        </Row>\n      ))}\n    </>\n  )\n}\nexport default AnswerCommentsView\n\n/* \n? when should you use arror function in jsx \n! seems like whenever I need to ender properties into the function arrow function is needed. \n\n?arrow functions VS regular functions - what is the difference?\n\n*/\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { Button, Card, Form, Row } from \"react-bootstrap\"\nimport { useNavigate, useParams } from \"react-router\"\nimport AnswerComments from \"../Answers/AnswerComments\"\nimport StateContext from \"../../../context/StateContext\"\nimport AnswerCommentsView from \"../Answers/AnswerCommentsView\"\n\nfunction Answer(props) {\n  let { id } = useParams()\n  const appState = useContext(StateContext)\n  const token = appState.user.token\n  const history = useNavigate()\n\n  useEffect(() => {}, [history])\n  const [edit, setEdit] = useState([])\n\n  const answerDelete = async answerID => {\n    console.log(\"answerDelete\")\n\n    try {\n      const res = await fetch(`/posts/${answerID}/answers/delete`, {\n        method: \"Delete\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        }\n      })\n\n      props.getAnswerComments()\n      // props.getAnswers()\n    } catch (error) {\n      return error\n    }\n  }\n\n  const answerEdit = (answerID, event) => {\n    console.log(\"answerEdit\")\n\n    setEdit(prev => [...prev, answerID])\n  }\n\n  const cancelAnswerEdit = answerID => {\n    console.log(\"answerEdit\")\n\n    const arr = edit\n\n    const cancelAnswerArr = arr.filter(item => !answerID.includes(item))\n\n    setEdit(cancelAnswerArr)\n  }\n\n  const handleSubmit = async (event, answerID) => {\n    console.log(\"handleSubmit\")\n\n    event.preventDefault()\n    /* \n    if answer id event is equal to answer id\n    then change answer to a submittable form.\n    */\n    const comment = event.target\n    const updateAnswer = { text: comment[0].value }\n    try {\n      const res = await fetch(`/posts/${answerID}/answers/edit`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        },\n        body: JSON.stringify(updateAnswer)\n      })\n\n      // props.getAnswers()\n      props.getAnswerComments()\n\n      setEdit(\"\")\n    } catch (error) {\n      return error\n    }\n  }\n\n  if (props.postAnswer == undefined) {\n    console.log(props.postAnswer)\n    // props.getAnswerComments()\n    // props.getAnswers()\n    return <p>Loading...</p>\n  }\n\n  return (\n    <>\n      <h1>Answers</h1>\n\n      {props.postAnswer.map((answer, index) => (\n        <>\n          {!edit.includes(answer._id) ? (\n            <>\n              <Card key={answer._id}>\n                {console.log(edit.state)}\n                <Card.Body>\n                  <Card.Title>Answer</Card.Title>\n                  <Card.Text>{answer.name}</Card.Text>\n                  <Card.Text>{answer.text}</Card.Text>\n                  {/* s3 bucket */}\n                  {answer.user && answer.user.image == undefined ? <img src=\"/default-profile.jpg\" alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"25px\" }} /> : <img src={`${answer.user.image}`} alt={`aa`} className=\"thumbnail\" style={{ height: \"25px\", width: \"25px\" }} />}\n                  {answer.user && answer.user._id == appState.user.id ? (\n                    <>\n                      <Button variant=\"warning\" onClick={() => answerEdit(answer._id)}>\n                        Edit\n                      </Button>\n                      <Button variant=\"danger\" onClick={() => answerDelete(answer._id)}>\n                        Delete\n                      </Button>\n                    </>\n                  ) : (\n                    \"\"\n                  )}\n                </Card.Body>\n              </Card>\n            </>\n          ) : (\n            <>\n              <Card key={answer._id}>\n                <Card.Body>\n                  <Card.Title>Answer Edit</Card.Title>\n                  <Card.Text>{answer.name}</Card.Text>\n                  <Form onSubmit={e => handleSubmit(e, answer._id)}>\n                    <Form.Control type=\"text\" placeholder={`${answer.text}`} />\n\n                    <Button type=\"submit\" variant=\"primary\">\n                      Save\n                    </Button>\n                    <Button variant=\"warning\" onClick={() => cancelAnswerEdit(answer._id)}>\n                      Cancel\n                    </Button>\n                    <Button variant=\"danger\" onClick={() => answerDelete(answer._id)}>\n                      Delete\n                    </Button>\n                  </Form>\n                </Card.Body>\n              </Card>\n            </>\n          )}\n\n          {/* get answers */}\n          <AnswerCommentsView comments={props.postAnswer[index].comments} keyvalue={answer._id} getAnswerComments={props.getAnswerComments} />\n          {/* Add Comment Form */}\n          <AnswerComments postId={props.postsID} answerId={answer._id} getAnswerComments={props.getAnswerComments} />\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default Answer\n","import { React, useEffect, useState, useRef, useContext } from \"react\"\nimport { useNavigate, useLocation } from \"react-router\"\nimport { useParams } from \"react-router-dom\"\nimport Navbar from \"./Navbar\"\nimport \"./css/Post.css\"\nimport \"./css/Comments.css\"\nimport { handleDate } from \"../helper/helper\"\nimport { copySync } from \"fs-extra\"\nimport { Alert, Button, Card, Col, Container, Fade, FloatingLabel, Form, Row } from \"react-bootstrap\"\n\n/* Context */\nimport StateContext from \"../context/StateContext\"\nimport PostView from \"./ui/PostView\"\nimport Page from \"./Page\"\nimport Answer from \"./ui/Answers/Answer\"\nimport CreateAnswer from \"./ui/Answers/CreateAnswer\"\nimport PostComments from \"./ui/PostView/PostComments\"\nimport CreatePostComments from \"./ui/PostView/CreatePostComments\"\n\n/* loading screen */\nimport ReactLoading from \"react-loading\"\n\nfunction Post() {\n  /* Answers scroll to */\n  const myRef = useRef(null)\n  const executeScroll = () => myRef.current.scrollIntoView()\n\n  const appState = useContext(StateContext)\n  const [post, setPost] = useState([])\n  const [comments, setComments] = useState([])\n  const [postAnswer, setPostAnswer] = useState([])\n  const [postsID, setPostsID] = useState()\n  const [postAnswerComments, setPostAnswerComments] = useState([])\n  const [refresh, setRefresh] = useState(false)\n\n  /* check state of page load */\n  const [isLoading, setIsLoading] = useState(true)\n\n  const history = useNavigate()\n  let { id } = useParams()\n  const token = appState.user.token\n  useEffect(() => {\n    console.log(\"useEffect\")\n\n    getPost()\n    getAnswerComments()\n    return () => window.removeEventListener(\"load\", handleLoading)\n  }, [])\n\n  async function getPost() {\n    console.log(\"getPostT\")\n    try {\n      // get comments\n      const resPost = await fetch(`/posts/${id}`, {\n        headers: {\n          method: \"GET\",\n          \"x-access-token\": token\n        }\n      })\n\n      const post = await resPost.json()\n\n      setPost(post)\n    } catch (error) {\n      return error\n    }\n  }\n\n  async function getComments() {\n    console.log(\"getComments\")\n\n    try {\n      // get comments\n      const resComment = await fetch(`/posts/${id}/comments`, {\n        headers: {\n          \"x-access-token\": token\n        }\n      })\n\n      const comments = await resComment.json()\n\n      setComments(comments)\n    } catch (error) {\n      return error\n    }\n  }\n\n  /* review is this redundant? */\n  const getAnswerComments = async () => {\n    console.log(\"getAnswerComments\")\n\n    try {\n      const res = await fetch(`/posts/answers/${id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token\n        }\n      })\n\n      const response = await res.json()\n      setPostAnswer(response)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /* set loading to fale on page load */\n  const handleLoading = () => {\n    console.log(\"handleLoading\")\n\n    setIsLoading(false)\n  }\n\n  if (post == undefined) {\n    return (\n      <>\n        <Navbar />\n        <Container>\n          <div style={{ paddingTop: \"25%\" }}>\n            <ReactLoading className=\"loader\" type=\"spinningBubbles\" color=\"#0000FF\" height={100} width={50} />\n          </div>\n        </Container>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Navbar />\n      {/* {console.log(post)} */}\n      <Page title={post.title}>\n        <PostView post={post} executeScroll={executeScroll} getPost={getPost} />\n\n        {/* Post Comments View */}\n        <PostComments comments={comments} getComments={getComments} />\n\n        {/* Post Comments Create */}\n        <CreatePostComments post={post} comments={comments} setComments={setComments} getComments={getComments} />\n\n        {/* Answers View*/}\n        <Answer postId={postsID} postAnswer={postAnswer} getAnswerComments={getAnswerComments} />\n\n        {/* Create Answers */}\n        <CreateAnswer myRef={myRef} getAnswerComments={getAnswerComments} />\n      </Page>\n    </>\n  )\n}\n\nexport default Post\n"],"names":["props","id","useParams","token","useContext","StateContext","user","handleAnswersSubmit","event","preventDefault","console","log","comment","target","createComment","text","value","post","fetch","method","headers","body","JSON","stringify","getAnswerComments","Row","ref","myRef","Col","xs","span","offset","Form","onSubmit","FloatingLabel","controlId","label","className","required","as","placeholder","style","height","class","Button","type","InputGroupText","createWithBsPrefix","Component","InputGroup","React","bsPrefix","size","hasValidation","useBootstrapPrefix","contextValue","useMemo","_jsx","InputGroupContext","children","classNames","displayName","Object","assign","Text","Radio","FormCheckInput","Checkbox","useState","postCommentClick","setPostCommentClick","handlePostComment","handleCommentSubmit","localStorage","getItem","comments","getComments","FormControl","onClick","appState","history","useNavigate","commentId","setCommentID","edit","setEdit","useEffect","editMouseLeave","getAttribute","deleteComment","updateComment","map","index","_id","includes","name","undefined","image","src","alt","width","e","prev","filter","pre","afterUpdate","variant","cancelEdit","handleDate","updatedAt","keyvalue","onMouseLeave","editOnClick","onMouseOver","key","liked","setLiked","following","setFollowing","deletePost","handleSubmit","updatePost","title","description","getPost","handleFollow","hasUserFollowed","res","json","handleUnFollow","handleLike","handleUnLike","Card","createdAt","file","username","executeScroll","color","background","control","answerId","postId","answerID","answerDelete","updateAnswer","postAnswer","answer","cancelAnswerArr","item","cancelAnswerEdit","state","postsID","useRef","setPost","setComments","setPostAnswer","setIsLoading","resPost","resComment","window","removeEventListener","handleLoading","response","Navbar","Container","paddingTop","Page","current","scrollIntoView","CreatePostComments"],"sourceRoot":""}